
1000 :-------------------------------------------------
1010 : DNS Client  2010/06/26
1020 :
1030 : rvtl dns_XX.vtl - 8.8.8.8 www.example.com
1040 :-------------------------------------------------
1050 :
1060 z=&
1070 CacheSize=128*1024
1080 s=z z=z+16        : ip
1090 d=z d=z+16        : dns ip
1100 u=z z=z+256       : URL or PATH
1110 h=z z=z+256       : host
1120 q=z z=z+512       : dns buffer
1130 B=z z=z+512       : DNS Response buffer
1140 b=z z=z+CacheSize
1150 W=z z=z+512       : NAME
1160 [=0
1170 :
1180 d*=\0             : DNS IP address
1190 "DNS:" $*=d /
1200 ;=%=0 !=^Usage / #=-1
1210 h*=\1             : domain
1220 $*=h /
1230 ;=%=0 !=^Usage / #=-1
1240 [=1
1250 :------------------------------
1260 R=`&$FFFF
1270 !=^AdrByName
1280 ;=r<>0 !=^CheckDnsRes
1290 #=-1
1300 :
1310 :-------------------------------------------------
1320 : print usage
1330 :-------------------------------------------------
1340 ^Usage
1350   "usage   : ./dns.elf DNS_ADDRESS HOST" /
1360   "example : ./dns.elf 127.0.0.1 www.mztn.org" /
1370 ]
1380 :
1390 :-------------------------------------------------
1400 : make DNS query packet
1410 :  enter  h : hostname
1420 :         R : identification
1430 :         q : buffer
1440 :  return q[] : DNS query packet
1450 :         r : # of bytes
1460 :-------------------------------------------------
1470 ^DNS_query
1480   +pgijk
1490   r=R !=^ConvEndian2 q{0}=r     : ID
1500   q{1}=$0001 : query=0,Opcode=0 (network order)
1510   q{2}=$0100 : 1 question (network order)
1520   q{3}=$0000
1530   q{4}=$0000
1540   q{5}=$0000
1550   : h     [myhost.example.com]
1560   : q{6}- [6myhost7example3com0]
1570   p=q+(2*6)
1580   i=0
1590   j=0
1600   h*=h
1610   g=%
1620   i=0
1630   @
1640     ;=(h(i)<>'.')&(h(i)<>0) #=^DQ01
1650     ;=i=0 #=^DQ01
1660     p(0)=j    : pascal string
1670     p=p+1
1680     k=0
1690     @
1700       p(0)=h(i-j+k)
1710       p=p+1
1720       k=k+1
1730     @=(k>=j)
1740     j=0
1750     i=i+1
1760   ^DQ01
1770     j=j+1
1780     i=i+1
1790   @=(i>=(g+1))
1800   p(0)=0
1810   p=p+1
1820   :
1830   p{0}=$0100  : Type(network order)
1840   p=p+2
1850   p{0}=$0100  : Class(network order)
1860   r=p+2-q
1870   -kjigp
1880 ]
1890 :
1900 :-------------------------------------------------
1910 : Request DNS
1920 : enter   d : dns ip string
1930 :         h : hostname string
1940 :         R : ID
1950 : return  r : if 0, recieve error
1960 :-------------------------------------------------
1970 ^AdrByName
1980   +szcput
1990   s=z z=z+16
2000   c=z z=z+48
2010   !=^SocketUDP
2020   ;=r<0 "Socket Error! " ?=r / #=-1
2030   f=r
2040   !=^DNS_query
2050   t=q
2060   u=r
2070   p=53
2080   !=^SendToBuf
2090   ;=r<0 "SendTo Error! " ?=r / #=-1
2100   "SendTo " ?=r "bytes" /
2110   :---- response ----
2120   u=512
2130   !=^ReadWait5s
2140   ;=r=0 / "No response in 5sec." / #=^ABNexit
2150   !=^RecvFromBuf
2160   ;=r<0 "RecvFrom Error! " ?=r / #=-1
2170   "recieve " ?=r " bytes" /
2180   :---- data dump ----
2190   :+ij
2200   :i=0,r-1
2210   :  "<" ?[2]=i ">" ?$=q(i) " "
2220   :  "["
2230   :  j='.'
2240   :  ;=(q(i)>=$20)&(q(i)<$80) j=q(i)
2250   :  $=j "] "
2260   :  ;=(i-(i/8*8))=7 /
2270   :@=i+1
2280   :-ji
2290 ^ABNexit
2300   -tupczs
2310 ]
2320 :
2330 :-------------------------------------------------
2340 : Check DNS response
2350 : enter   q : buffer
2360 :         n : response size
2370 :         R : ID
2380 : return  r : ip address
2390 :-------------------------------------------------
2400 ^CheckDnsRes
2410   r=q{0} !=^ConvEndian2 S=r : ID
2420   ;=S<>R  "ID [" ??=S ":" ??=R "] doesnot match." /
2430   / "ID      : " ?#=S /
2440   ?!8!=q(2) " " ?!8!=q(3) /
2450   r=q{2} !=^ConvEndian2 A=r : QDCount
2460   "QDCount : " ?=A /
2470   r=q{3} !=^ConvEndian2 B=r : ANCount
2480   "ANCount : " ?=B /
2490   r=q{4} !=^ConvEndian2 U=r : NSCount
2500   "NSCount : " ?=U /
2510   r=q{5} !=^ConvEndian2 D=r : ARCount
2520   "ARCount : " ?=D /
2530   p=q+12
2540   ;=A=0 #=^ANCount
2550   / "Question"
2560   / "  offset  : " ?=p-q /
2570   "  NAME    : "
2580   !=^CheckName
2590   r=p{0} !=^ConvEndian2 T=r : TYPE
2600   "  TYPE    : " ?=T /
2610   r=p{1} !=^ConvEndian2 C=r : CLASS
2620   "  CLASS   : " ?=C /
2630   p=p+4
2640 ^ANCount
2650   E=B+U+D
2660   ;=E=0 ]
2670   I=0,E-1
2680     ;=(I=0)&(B>0)    / "Answer"
2690     ;=(I=B)&(U>0)    / "Name Server"
2700     ;=(I=(B+U))&(D>0)  / "Additional"
2710     / "  offset  : " ?=p-q /
2720     "  NAME    : "
2730     !=^CheckName
2740     r=p{0} !=^ConvEndian2 T=r : TYPE
2750     "  TYPE    : " ?=T /
2760     r=p{1} !=^ConvEndian2 C=r : CLASS
2770     "  CLASS   : " ?=C /
2780     r=p[2] !=^ConvEndian4 L=r : TTL
2790     "  TTL     : " ?=L /
2800     r=p{4} !=^ConvEndian2 N=r : RDLENGTH
2810     "  RDLENGTH: " ?=N /
2820     p=p+10
2830     !=^CheckRData
2840   @=I+1
2850 ]
2860 :
2870 :-------------------------------------------------
2880 : Check Name
2890 : enter   q : buffer
2900 :         p : top of Name
2910 :         n : response size
2920 :         R : ID
2930 : return  r : ip address
2940 :-------------------------------------------------
2950 ^CheckName
2960   ;=p(0)=0 p=p+1 "(none)" / ]
2970   +s
2980   s=W
2990   e=0
3000   @
3010     !=^NameField
3020   @=(e=1)
3030   -s
3040 ]
3050 :
3060 :-------------------------------------------------
3070 : Name
3080 :-------------------------------------------------
3090 ^NameField
3100   ;=e=1 ]
3110   ;=(p(0)&$C0)<>0 !=^MesgDecomp ]
3120   @
3130     !=^PStringCopy
3140     p=p+r
3150     s=s+r
3160     ;=p(0)<>0 s(0)='.' $='.' s=s+1
3170   @=((p(0)=0)|((p(0)&$C0)<>0))
3180   ;=p(0)=0 p=p+1 e=1 /
3190 ]
3200 :
3210 :-------------------------------------------------
3220 : Message Decompression
3230 :-------------------------------------------------
3240 ^MesgDecomp
3250   +p
3260   o=(p(0)*256+p(1))&$3FFF : calc offset
3270   p=q+o
3280   @
3290     !=^NameField
3300   @=(e=1)
3310   -p
3320   p=p+2
3330 ]
3340 :
3350 :-------------------------------------------------
3360 : Pascal String Copy to buffer
3370 : enter   s : buffer to copy string
3380 :         x : pointer to next char
3390 :-------------------------------------------------
3400 ^PStringCopy
3410   +ni
3420   n=p(0)
3430   i=1,n
3440     s(i)=p(i) $=p(i)
3450   @=i+1
3460   s(n+1)=0
3470   r=n+1
3480   -in
3490 ]
3500 :
3510 :-------------------------------------------------
3520 : Check RData
3530 : enter   q : buffer
3540 :         p : top of RData
3550 :         n : RData length
3560 : return  r :
3570 :-------------------------------------------------
3580 ^CheckRData
3590   "  RDATA   : "
3600   ;=T=1 ?=p(0) "." ?=p(1) "." ?=p(2) "." ?=p(3) /
3610   ;=T=2 !=^CheckName ]
3620   p=p+N
3630 ]
3640 :
3650 

10000 :=================================================
10010 : rvtl (i386) library for network  2015/08/30
10020 :
10030 :=================================================
10040 : z=&
10050 
10060 :-------------------------------------------------
10070 : enter   a : syscall#
10080 : return  r : fd, negative(error)
10090 :-------------------------------------------------
10100 ^SocketCall
10110    a=102              : sys_socketcall 0x66
10120    |zz
10130    r=|
10140 ]
10150 :
10160 :-------------------------------------------------
10170 :sys_socket
10180 : enter   c:引数配列名を代入
10190 :         c[0]=familyb
10200 :         c[1]=type
10210 :         c[2]=protocol
10220 : return  r : fd, negative(error)
10230 :-------------------------------------------------
10240 ^Socket
10250   +ab
10260   b=1
10270   !=^SocketCall
10280   -ba
10290 ]
10300 :
10310 :-------------------------------------------------
10320 :sys_bind
10330 : enter   c:引数配列名を代入
10340 :         c[0]=fd, c[1]=(sockaddr *)umyaddr,
10350 :         c[2]=addrlen
10360 : return  r
10370 :-------------------------------------------------
10380 ^Bind
10390   +abc
10400   b=2
10410   !=^SocketCall
10420   -cba
10430 ]
10440 :
10450 :-------------------------------------------------
10460 :sys_connect
10470 : enter   c:引数配列名を代入
10480 :         c[0]=fd, c[1]sockaddr *uservaddr,
10490 :         c[2]=addrlen
10500 : return  r
10510 :-------------------------------------------------
10520 ^Connect
10530   +abc
10540   b=3
10550   !=^SocketCall
10560   -cba
10570 ]
10580 :
10590 :-------------------------------------------------
10600 :sys_listen
10610 : enter   c:引数配列名を代入
10620 :         c[0]=fd, c[1]=backlog
10630 : return  r
10640 :-------------------------------------------------
10650 ^Listen
10660   +abc
10670   b=4
10680   !=^SocketCall
10690   -cba
10700 ]
10710 :
10720 :-------------------------------------------------
10730 :sys_accept
10740 : enter   c:引数配列名を代入
10750 :         c[0]=fd, c[1]=sockaddr *upeer_sockaddr,
10760 :         c[2]=*upeer_addrlen
10770 : return  r
10780 :-------------------------------------------------
10790 ^Accept
10800   +abc
10810   b=5
10820   !=^SocketCall
10830   -cba
10840 ]
10850 :
10860 :-------------------------------------------------
10870 :sys_getsockname
10880 : enter   c:引数配列名を代入
10890 :         c[0]=fd, c[1]=sockaddr *usockaddr,
10900 :         c[2]=*usockaddr_len
10910 : return  r
10920 :-------------------------------------------------
10930 ^GetSockName
10940   +abc
10950   b=6
10960   !=^SocketCall
10970   -cba
10980 ]
10990 :
11000 :-------------------------------------------------
11010 :sys_getpeername
11020 : enter   c:引数配列名を代入
11030 :         c[0]=fd, c[1]=sockaddr *usockaddr,
11040 :         c[2]=*usockaddr_len
11050 : return  r
11060 :-------------------------------------------------
11070 ^GetPeerName
11080   +abc
11090   b=7
11100   !=^SocketCall
11110   -cba
11120 ]
11130 :
11140 :-------------------------------------------------
11150 :sys_socketpair
11160 : enter   c:引数配列名を代入
11170 :         c[0]=family, c[1]=type,
11180 :         c[2]=protocol, c[3]=usockvec[2]
11190 : return  r
11200 :-------------------------------------------------
11210 ^SocketPair
11220   +abc
11230   b=8
11240   !=^SocketCall
11250   -cba
11260 ]
11270 :
11280 :-------------------------------------------------
11290 :sys_send
11300 : enter   c:引数配列名を代入
11310 :         c[0]=fd, c[1]=void * buff,
11320 :         c[2]=size_t len,  c[3]=uint flags
11330 : return  r
11340 :-------------------------------------------------
11350 ^Send
11360   +abc
11370   b=9
11380   !=^SocketCall
11390   -cba
11400 ]
11410 :
11420 :-------------------------------------------------
11430 :sys_recv
11440 : enter   c:引数配列名を代入
11450 :         c[0]=fd, c[1]=void * ubuf,
11460 :         c[2]=size_t size, c[3]=uint flags
11470 : return  r
11480 :-------------------------------------------------
11490 ^Recv
11500   +abc
11510   b=10
11520   !=^SocketCall
11530   -cba
11540 ]
11550 :
11560 :-------------------------------------------------
11570 :sys_sendto
11580 : enter   c:引数配列名を代入
11590 :         c[0]=fd, c[1]=void * buff,
11600 :         c[2]=size_t len,  c[3]=uint flags,
11610 :         c[4]=sockaddr *addr, c[5]=addr_len
11620 : return  r
11630 :-------------------------------------------------
11640 ^SendTo
11650   +abc
11660   b=11
11670   !=^SocketCall
11680   -cba
11690 ]
11700 :
11710 :-------------------------------------------------
11720 :sys_recvfrom
11730 : enter   c:引数配列名を代入
11740 :         c[0]=fd, c[1]=void * ubuf,
11750 :         c[2]=size_t size, c[3]=uint flags,
11760 :         c[4]=sockaddr *addr, c[5]=*addr_len
11770 : return  r
11780 :-------------------------------------------------
11790 ^RecvFrom
11800   +abc
11810   b=12
11820   !=^SocketCall
11830   -cba
11840 ]
11850 :
11860 :-------------------------------------------------
11870 :sys_shutdown
11880 : enter   c:引数配列名を代入
11890 :         c[0]=fd, c[1]=how
11900 : return  r
11910 :-------------------------------------------------
11920 ^Shutdown
11930   +abc
11940   b=13
11950   !=^SocketCall
11960   -cba
11970 ]
11980 :
11990 :-------------------------------------------------
12000 :sys_setsockopt
12010 : enter   c:引数配列名を代入
12020 :         c[0]=fd, c[1]=level, c[2]=optname,
12030 :         c[3]=char *optval, c[4]=optlen
12040 : return  r
12050 :-------------------------------------------------
12060 ^SetSockopt
12070   +abc
12080   b=14
12090   !=^SocketCall
12100   -cba
12110 ]
12120 :
12130 :-------------------------------------------------
12140 :sys_getsockopt
12150 : enter   c:引数配列名を代入
12160 :         c[0]=fd, c[1]=level, c[2]=optname,
12170 :         c[3]=char *optval, c[4]=*optlen
12180 : return  r
12190 :-------------------------------------------------
12200 ^GetSockopt
12210   +abc
12220   b=15
12230   !=^SocketCall
12240   -cba
12250 ]
12260 :
12270 :-------------------------------------------------
12280 :sys_sendmsg
12290 : enter   c:引数配列名を代入
12300 :         c[0]=fd, c[1]=msghdr *msg,
12310 :         c[2]=uint flags
12320 : return  r
12330 :-------------------------------------------------
12340 ^SendMsg
12350   +abc
12360   b=16
12370   !=^SocketCall
12380   -cba
12390 ]
12400 :
12410 :-------------------------------------------------
12420 : sys_recvmsg
12430 : enter   c:引数配列名を代入
12440 :         c[0]=fd, c[1]=msghdr *msg,
12450 :         c[2]=uint flags
12460 : return  r
12470 :-------------------------------------------------
12480 ^RecvMsg
12490   +abc
12500   b=17
12510   !=^SocketCall
12520   -cba
12530 ]
12540 :
12550 :=================================================
12560 : Network Utility
12570 :=================================================
12580 :-------------------------------------------------
12590 : select
12600 : enter   f : file descriptor
12610 :         t : t[0]=sec, t[1]=usec
12620 : return  r : contents
12630 :-------------------------------------------------
12640 ^Select
12650   +uxyzabcdefi
12660   u=z z=z+32
12670   i=0,31 u(i)=0 @=i+1 : FD_ZERO
12680   x=f/8  y=1<<%
12690   u(x)=u(x)|y
12700   b=f+1     :
12710   c=u       : 読みだしチェックの1つだけ
12720   d=0
12730   e=0
12740   f=t       : time
12750   |ve
12760   ;=+%<=30400 e=t f=0 : rvtl-3.04以前のバグ対策
12770   a=142     : sys_select
12780   |zz
12790   r=|
12800   -ifedcbazyxu
12810 ]
12820 :
12830 :-------------------------------------------------
12840 : CheckRead
12850 : enter   f : file descriptor
12860 :         t : sec (timeout)
12870 :         u : msec (timeout)
12880 : return  r : contents
12890 :-------------------------------------------------
12900 ^CheckRead
12910   +ztm
12920   m=u*1000    : msec
12930   t=z z=z+16
12940   t[0]=t      : sec
12950   t[1]=m      : usec
12960   !=^Select
12970   -mtz
12980 ]
12990 :
13000 :-------------------------------------------------
13010 : ReadWait
13020 : enter   f : file descriptor
13030 : return  r : contents
13040 :-------------------------------------------------
13050 ^ReadWait
13060   +tu
13070   t=0     : 0sec
13080   u=500   : 500msec
13090   !=^CheckRead
13100   -ut
13110 ]
13120 :
13130 :-------------------------------------------------
13140 : ReadWait5s
13150 : enter   f : file descriptor
13160 : return  r : contents
13170 :-------------------------------------------------
13180 ^ReadWait5s
13190   +zt
13200   t=z z=z+16
13210   t[0]=5      : sec
13220   t[1]=0      : usec
13230   !=^Select
13240   -tz
13250 ]
13260 :
13270 :-------------------------------------------------
13280 : IPアドレス文字列から NetworkOrder の32bit整数
13290 : in  s : IPアドレス文字列のバッファ先頭アドレス
13300 : out r : 32ビット整数のIPアドレス(big endian)
13310 :-------------------------------------------------
13320 ^inet_ntoa
13330   +zij
13340   r=0
13350   i=0
13360   @
13370     j=0 r=r<<8
13380     @
13390       j=j*10+(s(i)-$30)
13400       i=i+1
13410     @=((s(i)='.')|(s(i)=0))
13420     r=r|(j&$FF)
13430     ;=(s(i)='.') i=i+1
13440   @=(s(i)=0)
13450   -jiz
13460 ]
13470 :
13480 :-------------------------------------------------
13490 : 数値 --> 10進数文字列変換
13500 :
13510 : a の数値を文字列に変換して s からの領域に
13520 : 文字列として返す。
13530 : r に文字数を返す
13540 :-------------------------------------------------
13550 ^itoa
13560     +aij
13570     i=0
13580     @
13590       a=a/10 +=%  : スタックにプッシュ
13600       i=i+1
13610     @=(a=0)
13620     j=0
13630     @
13640       i=i-1
13650       s(j)=;+$30  : スタックからポップ
13660       j=j+1
13670     @=(i=0)
13680     s(j)=0
13690     r=j
13700     -jia
13710 ]
13720 :
13730 :-------------------------------------------------
13740 : NetworkOrder の32bit整数からIPアドレス文字列
13750 : in  s : バッファ先頭アドレス
13760 : in  a : 32ビット整数のIPアドレス
13770 : out s : IPアドレス文字列
13780 :-------------------------------------------------
13790 ^inet_aton
13800   +sabcde
13810   b=a>>24
13820   c=(a>>16)&$FF
13830   d=(a>>8)&$FF
13840   e=a&$FF
13850   a=b !=^itoa
13860   s(r)='.'
13870   a=c s=s+r+1 !=^itoa
13880   s(r)='.'
13890   a=d s=s+r+1 !=^itoa
13900   s(r)='.'
13910   a=e s=s+r+1 !=^itoa
13920   s(r)=0
13930   -edcbas
13940 ]
13950 :
13960 :-------------------------------------------------
13970 : 2バイト整数のエンディアンを反転、上位桁はゼロ
13980 : in  : r
13990 : out : r
14000 :-------------------------------------------------
14010 ^ConvEndian2
14020   +n
14030   r=r&$ffff
14040   n=r>>8
14050   r=r<<8&$ff00
14060   r=r|n
14070   -n
14080 ]
14090 :
14100 :-------------------------------------------------
14110 : 4バイト整数のエンディアンを反転
14120 : in  : r
14130 : out : r
14140 :-------------------------------------------------
14150 ^ConvEndian4
14160   +nm
14170   n=r>>16
14180   r=r&$ffff
14190   !=^ConvEndian2
14200   m=r<<16
14210   r=n
14220   !=^ConvEndian2
14230   r=m|r
14240   -mn
14250 ]
14260 :
14270  :-------------------------------------------------
14280 :socket (TCP)
14290 : return  r : fd, negative(error)
14300 :-------------------------------------------------
14310 ^SocketTCP
14320   +cz
14330   c=z z=z+12
14340   c[0]=2   : AF_INET
14350   c[1]=1   : SOCK_STREAM
14360   c[2]=0   : TCP(6)
14370   !=^Socket
14380   -zc
14390 ]
14400 :
14410 :-------------------------------------------------
14420 :socket (UDP)
14430 : return  r : fd, negative(error)
14440 :-------------------------------------------------
14450 ^SocketUDP
14460   +cz
14470   c=z z=z+12
14480   c[0]=2   : AF_INET
14490   c[1]=2   : SOCK_DGRAM
14500   c[2]=17  : UDP
14510   !=^Socket
14520   -zc
14530 ]
14540 :
14550 :-------------------------------------------------
14560 :SockAddr
14570 : enter   s : sockaddr 領域確保済みのこと
14580 :         p : port
14590 :         a : ipaddress
14600 :
14610 :    +---+---+---+---+---+---+---+---+-------+
14620 :    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 -15 |
14630 :    +---+---+---+---+---+---+---+---+-------+
14640 :    |family |  port |   address     | all 0 |
14650 :    +---+---+---+---+---+---+---+---+-------+
14660 :     s{0}     s{1}        s[1]
14670 :
14680 : return  r :
14690 :         s : sockaddr
14700 :-------------------------------------------------
14710 ^SockAddr
14720   +iar
14730   i=0,3 s[i]=0 @=i+1
14740   s{0}=2   : AF_INET
14750   r=p
14760   !=^ConvEndian2
14770   s{1}=r   : port
14780   r=a
14790   !=^ConvEndian4
14800   s[1]=r   : address
14810   -rai
14820 ]
14830 
14840 :-------------------------------------------------
14850 :bind IP
14860 : enter   f : socket descripter
14870 :         p : port
14880 :         a : ipaddress (Network Order)
14890 : return  r
14900 :-------------------------------------------------
14910 ^BindIP
14920   +szci
14930   c=z z=z+12
14940   s=z z=z+16
14950   !=^SockAddr
14960   c[0]=f   : fd
14970   c[1]=s
14980   c[2]=16  : length of 2+14 in bytes
14990   !=^Bind
15000   -iczs
15010 ]
15020 :
15030 :-------------------------------------------------
15040 :connect IP
15050 : enter   f : socket descripter
15060 :         p : port
15070 :         a : ipaddress (Network Order)
15080 : return  r
15090 :-------------------------------------------------
15100 ^ConnectIP
15110   +szci
15120   c=z z=z+12
15130   s=z z=z+16
15140   !=^SockAddr
15150   c[0]=f   : fd
15160   c[1]=s
15170   c[2]=16  : length of 2+14 in bytes
15180   !=^Connect
15190   -iczs
15200 ]
15210 :
15220 :-------------------------------------------------
15230 :send buffer
15240 : enter   f : socket fd
15250 :         t : string buffer
15260 : return  r
15270 :-------------------------------------------------
15280 ^SendBuffer
15290   +zc
15300   c=z z=z+12
15310   c[0]=f   : fd
15320   c[1]=t   : buffer
15330   t*=t     : get length
15340   c[2]=%   : length
15350   c[3]=0   : MSG_* flags
15360   !=^Send
15370   -cz
15380 ]
15390 :
15400 :-------------------------------------------------
15410 :send CRLF
15420 : enter   f : socket fd
15430 : return  r
15440 :-------------------------------------------------
15450 ^SendCRLF
15460   +zt
15470   t=z z=z+3
15480   t(0)=13
15490   t(1)=10
15500   t(2)=0
15510   !=^SendBuffer
15520   -tz
15530 ]
15540 :
15550 :-------------------------------------------------
15560 :recv buffer
15570 : enter   f : socket fd
15580 :         b : string buffer
15590 :         n : buffer size
15600 : return  r : length
15610 :-------------------------------------------------
15620 ^RecvBuffer
15630   +zc
15640   c=z z=z+12
15650   c[0]=f   : fd
15660   c[1]=b   : buffer
15670   c[2]=n   : buffer size
15680   c[3]=0   : MSG_* flags
15690   !=^Recv
15700   -cz
15710 ]
15720 :
15730 :-------------------------------------------------
15740 : SendToBuffer
15750 : enter   f : socket fd
15760 :         t : buffer
15770 :         u : buffer length
15780 :         d : ip string
15790 :         p : port
15800 : return  r
15810 :-------------------------------------------------
15820 ^SendToBuf
15830   +saz
15840   s=d
15850   !=^inet_ntoa  : 文字列をIP整数に変換
15860   a=r
15870   s=z z=z+16
15880   !=^SockAddr
15890   c[0]=f
15900   c[1]=t
15910   c[2]=u
15920   c[3]=0
15930   c[4]=s
15940   c[5]=16
15950   !=^SendTo
15960   -zas
15970 ]
15980 :
15990 :-------------------------------------------------
16000 : RecvFromBuffer
16010 : enter   f : socket fd
16020 :         t : buffer
16030 :         u : buffer length
16040 :         d : ip string
16050 :         p : port
16060 : return  r
16070 :-------------------------------------------------
16080 ^RecvFromBuf
16090   +sazn
16100   n=z z=z+4
16110   s=d
16120   !=^inet_ntoa  : 文字列をIP整数に変換
16130   a=r
16140   s=z z=z+16
16150   n[0]=16
16160   !=^SockAddr
16170   c[0]=f
16180   c[1]=t
16190   c[2]=u
16200   c[3]=0
16210   c[4]=s
16220   c[5]=n
16230   !=^RecvFrom
16240   -nzas
16250 ]
16260 :
16270 
