1000 :-------------------------------------
1010 : ヒープソートのデモ 2005/5/28
1020 :
1030 :-------------------------------------
1040   Z=&
1050   A=Z  Z=Z+6000
1060   B=Z  Z=Z+6000
1070   :
1080   I=1,1500
1090     A[I]=`
1100     B[I]=I
1110   @=I+1
1120   "Sort 32bit: Number of item(< 1500) =" N=?
1130   h=A
1140   g=B
1150   n=N
1160   !=^HeapSort4
1170   I=1,N
1180     "A=" ?(12)=h[I] "  B=" ?=g[I] /
1190   @=I+1
1200   I=1,1500
1210     A{I}=`
1220     B{I}=I
1230   @=I+1
1240   /
1250   "Sort 16bit: Number of item(< 1500) =" N=?
1260   h=A
1270   g=B
1280   n=N
1290   !=^HeapSort2
1300   I=1,N
1310     "A=" ?(12)=A{I} "  B=" ?=B{I} /
1320   @=I+1
1330 #=-1
1340 :
19000 :-------------------------------------
19010 : 4バイト配列のヒープソート
19020 : h に比較する数値の配列   先頭h[1]
19030 : g に同時に並べ替える配列 先頭g[1]
19040 : n に要素の個数
19050 :-------------------------------------
19060 ^HeapSort4
19070     +rkij
19080     k=n/2 r=n
19090     i=k,1
19100       k=i
19110       !=^DownHeap4            : downheap(i,n)
19120     @=i-1 / /
19130     i=r,2
19140       k=1 j=i !=^HeapSwap4    : swap(1,i)
19150       k=1 r=i-1 !=^DownHeap4  : downheap(1,i-1)
19160     @=i-1
19170     -jikr
19180 ]
19190 :
19200 :-------------------------------------
19210 : DownHeap (k, r)
19220 :-------------------------------------
19230 ^DownHeap4
19240     +krj
19250    ^h4shift01
19260     j=2*k
19270     ;=j>r #=^h4shift02
19280     ;=j<>r ;=h[j+1]>h[j] j=j+1
19290     ;=h[k]>=h[j] #=^h4shift02
19300     !=^HeapSwap4
19310     k=j
19320     #=^h4shift01
19330    ^h4shift02
19340     -jrk
19350 ]
19360 :
19370 :-------------------------------------
19380 : 配列データのSwap
19390 : Swap (k, j)
19400 :-------------------------------------
19410 ^HeapSwap4
19420     +w
19430     w=h[j] h[j]=h[k] h[k]=w
19440     w=g[j] g[j]=g[k] g[k]=w
19450     -w
19460 ]
19470 :
19480 :-------------------------------------
19490 : 2バイト配列のヒープソート
19500 : h に比較する数値の配列   先頭h{1}
19510 : g に同時に並べ替える配列 先頭g{1}
19520 : n に要素の個数
19530 :-------------------------------------
19540 ^HeapSort2
19550     +rkij
19560     k=n/2 r=n
19570     i=k,1
19580       k=i
19590       !=^DownHeap2            : downheap(i,n)
19600     @=i-1 / /
19610     i=r,2
19620       k=1 j=i !=^HeapSwap2    : swap(1,i)
19630       k=1 r=i-1 !=^DownHeap2  : downheap(1,i-1)
19640     @=i-1
19650     -jikr
19660 ]
19670 :
19680 :-------------------------------------
19690 : DownHeap (k, r)
19700 :-------------------------------------
19710 ^DownHeap2
19720     +krj
19730    ^h2shift01
19740     j=2*k
19750     ;=j>r #=^h2shift02
19760     ;=j<>r ;=h{j+1}>h{j} j=j+1
19770     ;=h{k}>=h{j} #=^h2shift02
19780     !=^HeapSwap2
19790     k=j
19800     #=^h2shift01
19810    ^h2shift02
19820     -jrk
19830 ]
19840 :
19850 :-------------------------------------
19860 : 配列データのSwap
19870 : Swap (k, j)
19880 :-------------------------------------
19890 ^HeapSwap2
19900     +w
19910     w=h{j} h{j}=h{k} h{k}=w
19920     w=g{j} g{j}=g{k} g{k}=w
19930     -w
19940 ]
19950 :
